
(* Find exercise  *)

let n_left = { data <= 12; left <= 0; right <= 0}    (* 0 in head signals null *)
in let n_right = { data <= 44; left <= 0; right <= 0}
in let n_root = { data <= 33; left <= n_left ; right <= n_right }
in let t1 = { root <= n_root ; length <= 3} 

in letrec fhelp (node) = proc (trg) {
  (if number?(node)
   then zero?(1)
   else (
     if (node.data = trg)
     then zero?(0)
     else (
       if (node.data << trg)
       then ((fhelp node.right) trg)
       else ((fhelp node.left) trg))
   ))
} in

let find_bt = proc (t) { proc (e) { ((fhelp t.root) e) }} in

in ((find_bt t1) 12)
